/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.mycompany.myfarm.frontend.dialogs.partida.parcela;

import com.mycompany.myfarm.backend.MotorJuego;
import com.mycompany.myfarm.backend.animal.Animal;
import com.mycompany.myfarm.backend.granja.Parcela;
import com.mycompany.myfarm.backend.granjero.Granjero;
import com.mycompany.myfarm.backend.mercado.Mercado;
import com.mycompany.myfarm.frontend.dialogs.AccionExitosaDialog;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ronaldo
 */
public class MercadoAnimalesDialog extends javax.swing.JDialog {

    private Granjero granjero;
    private Parcela parcela;
    private Mercado mercado;

    /**
     * Creates new form MercadoAnimales
     */
    public MercadoAnimalesDialog(Granjero granjero, Parcela parcela, Mercado mercado) {
        initComponents();
        setLocationRelativeTo(null);
        this.granjero = granjero;
        this.parcela = parcela;
        this.mercado = mercado;
        ponerInfoATablaAnimales(mercado);
        ponerListaDeAnimalesAcmbAnimales(mercado);
        lblDineroDisponible.setText("Dinero disponible: " + granjero.getOroDisponible());
        btnComprar.setVisible(false);
        cmbCantidadAnimales.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaAnimales = new javax.swing.JTable();
        cmbAnimales = new javax.swing.JComboBox<>();
        btnComprar = new javax.swing.JButton();
        cmbCantidadAnimales = new javax.swing.JComboBox<>();
        lblDineroDisponible = new javax.swing.JLabel();
        btnVerificarMaximo = new javax.swing.JButton();
        btnRegresar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);

        jPanel1.setBackground(new java.awt.Color(204, 255, 204));

        jLabel1.setBackground(new java.awt.Color(255, 51, 0));
        jLabel1.setFont(new java.awt.Font("Ubuntu Mono", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("MERCADO-ANIMALES");
        jLabel1.setOpaque(true);

        tablaAnimales.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Precio", "Productos que genera", "Es destasable", "Espacio"
            }
        ));
        jScrollPane1.setViewportView(tablaAnimales);

        btnComprar.setBackground(new java.awt.Color(0, 153, 102));
        btnComprar.setForeground(new java.awt.Color(0, 0, 0));
        btnComprar.setText("Comprar");
        btnComprar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnComprarActionPerformed(evt);
            }
        });

        lblDineroDisponible.setText("jLabel2");

        btnVerificarMaximo.setBackground(new java.awt.Color(0, 255, 153));
        btnVerificarMaximo.setForeground(new java.awt.Color(0, 0, 0));
        btnVerificarMaximo.setText("Verificar Capacidad de Parcela");
        btnVerificarMaximo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerificarMaximoActionPerformed(evt);
            }
        });

        btnRegresar.setBackground(new java.awt.Color(255, 51, 0));
        btnRegresar.setForeground(new java.awt.Color(0, 0, 0));
        btnRegresar.setText("Regresar");
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(130, 130, 130)
                        .addComponent(lblDineroDisponible, javax.swing.GroupLayout.PREFERRED_SIZE, 496, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(btnRegresar, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 97, Short.MAX_VALUE)
                        .addComponent(cmbCantidadAnimales, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cmbAnimales, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnVerificarMaximo)
                    .addComponent(btnComprar, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblDineroDisponible, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbAnimales, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnVerificarMaximo, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnComprar, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbCantidadAnimales, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRegresar, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVerificarMaximoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerificarMaximoActionPerformed
        int indiceAnimalSeleccionado = cmbAnimales.getSelectedIndex();
        Animal animal = mercado.getAnimalesDisponibles().obtenerContenido(indiceAnimalSeleccionado);

        boolean puedeCriar = false;
        int maximoAnimales = 0;
        String elError = "";

        if (!parcela.getAnimales().esVacia()) {
            Animal primerAnimal = parcela.getAnimales().obtenerContenido(0);
            if (esMismaEspecie(animal)) {
                double espacioDisponible = parcela.getCapacidad()
                        - (parcela.getAnimales().getTamaño() * primerAnimal.getEspacioEnParcela());
                if (espacioDisponible >= animal.getEspacioEnParcela()) {
                    puedeCriar = true;
                    maximoAnimales = (int) (espacioDisponible / animal.getEspacioEnParcela());
                } else {
                    elError = "No hay suficiente espacio en la parcela para criar al animal seleccionado " + animal.getNombre();
                }
            } else {
                elError = "La parcela contiene animales de la especie " + primerAnimal.getNombre();
            }
        } else {
            if (parcela.getCapacidad() >= animal.getEspacioEnParcela()) {
                puedeCriar = true;
                maximoAnimales = (int) (parcela.getCapacidad() / animal.getEspacioEnParcela());
            } else {
                elError = "No hay suficiente espacio en la parcela para criar al animal seleccionado "+ animal.getNombre() ;
            }
        }

        if (puedeCriar) {
            pasarAComprar(maximoAnimales);
        } else {
            JOptionPane.showMessageDialog(this, elError, "No se puede criar", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_btnVerificarMaximoActionPerformed

    public boolean esMismaEspecie(Animal animal) {
        if (animal.getNombre().equals(parcela.getAnimales().obtenerContenido(0).getNombre())) {
            return true;
        }
        return false;
    }

    public void pasarAComprar(int maximoAnimales) {
        colocarCantidadesAComboBox(maximoAnimales);
        btnVerificarMaximo.setVisible(false);
        cmbAnimales.setVisible(false);
        btnComprar.setVisible(true);
        cmbCantidadAnimales.setVisible(true);
    }

    private void colocarCantidadesAComboBox(int maximo) {
        for (int i = 1; i <= maximo; i++) {
            cmbCantidadAnimales.addItem("" + i);
        }
    }
    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnRegresarActionPerformed

    private void btnComprarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnComprarActionPerformed
        int indiceDelAnimalSeleccionado = cmbAnimales.getSelectedIndex();
        int precioDelAnimal = mercado.getAnimalesDisponibles().obtenerContenido(indiceDelAnimalSeleccionado).getPrecioDeCompra();
        int cantidadDeAnimales = cmbCantidadAnimales.getSelectedIndex() + 1;
        int totalAPagar = precioDelAnimal * cantidadDeAnimales;
        if (granjero.getOroDisponible() >= totalAPagar) {
            //se realiza la compra
            granjero.pagar(totalAPagar);
            mercado.darleAnimalesAGranjero(parcela, indiceDelAnimalSeleccionado, cantidadDeAnimales);
            MotorJuego.getAlmacenador().getMercadoGeneral()
                    .getAnimalesDisponibles().obtenerContenido(indiceDelAnimalSeleccionado)
                    .agregarContadorCriaComprada(cantidadDeAnimales);
            AccionExitosaDialog dialog = new AccionExitosaDialog("Compra exitosa");
            dialog.setVisible(true);
            this.dispose();
            
        } else {
            JOptionPane.showMessageDialog(this, "No cuentas con el dinero suficiente para realizar la compra, selecciona menos animales",
                    "Falta dinero", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnComprarActionPerformed
    
    private void ponerInfoATablaAnimales(Mercado mercado) {
        for (int i = 0; i < mercado.getAnimalesDisponibles().getTamaño(); i++) {
            String listaDeProductos = obtenerListaDeProductosDeUnAnimal(mercado.getAnimalesDisponibles().obtenerContenido(i));
            DefaultTableModel model = (DefaultTableModel) tablaAnimales.getModel();
            model.addRow(new Object[]{mercado.getAnimalesDisponibles().obtenerContenido(i).getNombre(), mercado.getAnimalesDisponibles().obtenerContenido(i).getPrecioDeCompra(),
                listaDeProductos, esDestasable(mercado.getAnimalesDisponibles().obtenerContenido(i)), mercado.getAnimalesDisponibles().obtenerContenido(i).getEspacioEnParcela()});
        }
    }
    
    private void ponerListaDeAnimalesAcmbAnimales(Mercado mercado) {
        for (int i = 0; i < mercado.getAnimalesDisponibles().getTamaño(); i++) {
            cmbAnimales.addItem(mercado.getAnimalesDisponibles().obtenerContenido(i).getNombre());
        }
    }
    
    public String esDestasable(Animal animal) {
        if (animal.isEsDestasable()) {
            return "Sí";
        }
        return "No";
    }
    
    public String obtenerListaDeProductosDeUnAnimal(Animal animal) {
        String lista = "";
        for (int i = 0; i < animal.getProductos().getTamaño(); i++) {
            if (i < animal.getProductos().getTamaño() - 1) {
                lista += animal.getProductos().obtenerContenido(i).getNombre() + ", ";
            } else {
                lista += animal.getProductos().obtenerContenido(i).getNombre();
            }
        }
        return lista;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnComprar;
    private javax.swing.JButton btnRegresar;
    private javax.swing.JButton btnVerificarMaximo;
    private javax.swing.JComboBox<String> cmbAnimales;
    private javax.swing.JComboBox<String> cmbCantidadAnimales;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDineroDisponible;
    private javax.swing.JTable tablaAnimales;
    // End of variables declaration//GEN-END:variables
}
